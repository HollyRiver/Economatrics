qqnorm(model$residuals, pch = 16, cex = 0.5)
qqline(model$residuals, col = 2, lty = 2)
shapiro.test(model)
shapiro.test(model$residuals)
which(abs(rstandard(model)) > 3)  ## absolute value of standarized residuals.
options(repr.plot.width = 12, repr.plot.height = 6)
install.packages('lmtest')
library(lmtest)
library(lmtest)
n <- 200
x <- round(runif(n, 0, 10), 3)
epsilon <- rt(n, 3)
beta_0 <- 3
beta_1 <- 2
y <- beta_0 + beta_1 * x + epsilon
plot(y~x, pch = 16, cex = 0.5, col = 'darkorange')
model <- lm(y~x)
summary(model)
plot(model$residuals ~ x, pch = 16, ylab = 'Residual', main = 'Residual Plot', cex = 0.5, cex.main = 1)
abline(h = 0, lty = 2, col = 'grey')
plot(rstandard(model) ~ x, pch = 16, ylab = 'Standarized Residual', main = 'Residual Plot', cex = 0.5, cex.main = 1)
abline(h = c(-3, 0, 3), lty = 2, col = c(2, 1, 2))
par(mfrow = c(1,2))
hist(model$residuals, prob = T, main = '잔차의 히스토그램', breaks = 20, cex.main = 1)
curve(dnorm(x, 0, sd(model$residuals)), col = 'darkblue', lwd = 2, add = TRUE)  ## 표준편차는 잔차의 표준편차를 사용해야 함.
hist(rstandard(model), prob = T, main = '표준화된 잔차의 히스토그램', breaks = 20, cex.main = 1)
curve(dnorm(x, 0, 1), col = 'darkblue', lwd = 2, add = TRUE)
qqnorm(model$residuals, pch = 16, cex = 0.5)
qqline(model$residuals, col = 2, lty = 2)
shapiro.test(model$residuals)
which(abs(rstandard(model)) > 3)  ## absolute value of standarized residuals.
n <- 200
x <- round(runif(n, 0, 10), 3)
epsilon <- rt(n, 3)
beta_0 <- 3
beta_1 <- 2
y <- beta_0 + beta_1 * x + epsilon
plot(y~x, pch = 16, cex = 0.5, col = 'darkorange')
model <- lm(y~x)
summary(model)
plot(model$residuals ~ x, pch = 16, ylab = 'Residual', main = 'Residual Plot', cex = 0.5, cex.main = 1)
abline(h = 0, lty = 2, col = 'grey')
plot(rstandard(model) ~ x, pch = 16, ylab = 'Standarized Residual', main = 'Residual Plot', cex = 0.5, cex.main = 1)
abline(h = c(-3, 0, 3), lty = 2, col = c(2, 1, 2))
par(mfrow = c(1,2))
hist(model$residuals, prob = T, main = '잔차의 히스토그램', breaks = 20, cex.main = 1)
curve(dnorm(x, 0, sd(model$residuals)), col = 'darkblue', lwd = 2, add = TRUE)  ## 표준편차는 잔차의 표준편차를 사용해야 함.
hist(rstandard(model), prob = T, main = '표준화된 잔차의 히스토그램', breaks = 20, cex.main = 1)
curve(dnorm(x, 0, 1), col = 'darkblue', lwd = 2, add = TRUE)
qqnorm(model$residuals, pch = 16, cex = 0.5)
qqline(model$residuals, col = 2, lty = 2)
shapiro.test(model$residuals)
which(abs(rstandard(model)) > 3)  ## absolute value of standarized residuals.
summary(adj_model)
x1 <- x[-which(abs(rstandard(model)) > 3)]
y1 <- y[-which(abs(rstandard(model)) > 3)]
## 해당하는 녀석들을 제외함, 그리고 다시 분석할거임.
adj_model <- lm(y1~x1)
summary(adj_model)
par(mfrow = c(1,2))
plot(adj_model$residuals~x, pch = 16, cex = 0.5, ylab = 'Residual', main = 'Residual Plot', cex.main = 1)
par(mfrow = c(1,2))
plot(adj_model$residuals~x1, pch = 16, cex = 0.5, ylab = 'Residual', main = 'Residual Plot', cex.main = 1)
par(mfrow = c(1,2))
plot(adj_model$residuals~x1, pch = 16, cex = 0.5, ylab = 'Residual', main = 'Residual Plot', cex.main = 1)
abline(h = c(-2,0,2), col = c('red','grey','red'), lty = 2)
par(mfrow = c(1,2))
plot(adj_model$residuals~x1, pch = 16, cex = 0.5, ylab = 'Residual', main = 'Residual Plot', cex.main = 1)
abline(h = c(-3,0,3), col = c('red','grey','red'), lty = 2)
sd_residual <- std(adj_model$residuals)
sd_residual <- sd(adj_model$residuals)
par(mfrow = c(1,2))
plot(adj_model$residuals~x1, pch = 16, cex = 0.5, ylab = 'Residual', main = 'Residual Plot', cex.main = 1)
sd_residual <- sd(adj_model$residuals)
abline(h = c(-2*sd_residual,0,2*sd_residual), col = c('red','grey','red'), lty = 2)
par(mfrow = c(1,2))
plot(adj_model$residuals~x1, pch = 16, cex = 0.5, ylab = 'Residual', main = 'Residual Plot', cex.main = 1)
sd_residual <- sd(adj_model$residuals)
abline(h = c(-3*sd_residual,0,3*sd_residual), col = c('red','grey','red'), lty = 2)
par(mfrow = c(1,2))
plot(adj_model$residuals~x1, pch = 16, cex = 0.5, ylab = 'Residual', main = 'Residual Plot', cex.main = 1)
sd_residual <- sd(adj_model$residuals)
abline(h = c(-3*sd_residual,0,3*sd_residual), col = c('red','grey','red'), lty = 2)
plot(rstandard(adj_model)~x1, pch = 16, cex = 0.5, ylab = 'Standarized Residual', main = 'Standarized Residual Plot', cex.main = 1)
abline(h = c(-3,0,3), col = c('red','grey','red'), lty = 2)
par(mfrow = c(1,2))
plot(adj_model$residuals~x1, pch = 16, cex = 0.5, ylab = 'Residual', main = 'Residual Plot', cex.main = 1, cex.ylab = 0.8)
sd_residual <- sd(adj_model$residuals)
abline(h = c(-3*sd_residual,0,3*sd_residual), col = c('red','grey','red'), lty = 2)
plot(rstandard(adj_model)~x1, pch = 16, cex = 0.5, ylab = 'Standarized Residual', main = 'Standarized Residual Plot', cex.main = 1)
abline(h = c(-3,0,3), col = c('red','grey','red'), lty = 2)
par(mfrow = c(1,2))
plot(adj_model$residuals~x1, pch = 16, cex = 0.5, ylab = 'Residual', main = 'Residual Plot', cex.main = 1)
sd_residual <- sd(adj_model$residuals)
abline(h = c(-3*sd_residual,0,3*sd_residual), col = c('red','grey','red'), lty = 2)
plot(rstandard(adj_model)~x1, pch = 16, cex = 0.5, ylab = 'Standarized Residual', main = 'Standarized Residual Plot', cex.main = 1)
abline(h = c(-3,0,3), col = c('red','grey','red'), lty = 2)
n <- 200
x <- sort(round(runif(n, 0, 10), 3))  ## sort_values(ascending = False)
epsilon <- c(rnorm(1))  ## epsilon
for (k in 2:n){
epsilon[k] <- 0.5*epsilon[k-1] + rnorm(1)  ## 잔차가 직전값에 영향을 받음
}
beta_0 <- 3
beta_1 <- 0.9
y <- beta_0 + beta_1 * x + epsilon
plot(y~x, pch = 16, cex = 0.5, col = 'darkorange')
model <- lm(y~x)
summary(model)
plot(model$residuals~x, pch = 16, ylab = 'Residual', main = 'Residual Plot')
abline(h = 0, lty = 2, col = 'grey')
plot(model$residuals~x, pch = 16, ylab = 'Residual', main = 'Residual Plot', cex = 0.5)
abline(h = 0, lty = 2, col = 'grey')
dwtest(model, alternative = 'two.sided')
plot(model$residuals ~ x, pch = 16, ylab = 'Residual', main = 'Line the cross Residuals', type = 'line')
plot(model$residuals ~ x, pch = 16, ylab = 'Residual', main = 'Line the cross Residuals', lwd = 1)
plot(model$residuals ~ x, ylab = 'Residual', main = 'Line the cross Residuals', lwd = 1)
plot(model$residuals ~ x, ylab = 'Residual', main = 'Line the cross Residuals', type = 'l')
plot(model$residuals ~ x, ylab = 'Residual', main = 'Line the cross Residuals', type = 'line')
plot(model$residuals ~ x, ylab = 'Residual', main = 'Line the cross Residuals', type = 'lineed')
plot(model$residuals ~ x, ylab = 'Residual', main = 'Line the cross Residuals', type = 'lined')
plot(model$residuals ~ x, ylab = 'Residual', main = 'Line the cross Residuals', type = 'dashed')
plot(model$residuals ~ x, ylab = 'Residual', main = 'Line the cross Residuals', type = 'l')
plot(model$residuals ~ x, ylab = 'Residual', main = 'Line the cross Residuals', type = 'l', lwd = 0.5)
plot(model$residuals ~ x, ylab = 'Residual', main = 'Line the cross Residuals', type = 'l', lwd = 0.5)
abline(h = 0, col = 'grey', lwd = 2)
plot(model$residuals ~ x, ylab = 'Residual', main = 'Line the cross Residuals', type = 'l', lwd = 0.5)
abline(h = 0, col = 'grey', lty = 2)
R.Version()
summary(L_model)$coef[1,2]  ## beta0 표준오차, 데이터프레임 다루듯 직접 부를 수 있음
setwd("C:\\Users\\hollyriver\\Documents\\Github\\Economatrics\\RA course\\data")
setwd("C:\\Users\\hollyriver\\Documents\\Github\\Economatrics\\RA course\\data")
dt <- data.frame(x = c(4,8,9,8,8,12,6,10,6,9),
y = c(9,20,22,15,17,30,18,25,10,20))
dt
ggplot(dt) + geom_point(aes(x, y), col = 'darkorange', size = 3) + xlab("광고료") + ylab('총판매액') +
theme_bw() +
theme(axis.title = element_text(size = 14)) ## 테마, 글씨크기
library(ggplot2)
R.Version()
install.packages('ggplot2')
install.packages("ggplot2")
library(ggplot2)
help()
install.packages('installr')
library(installr)
check.for.updates.R()
install.R()
R.Version()
R.Version()
options(repr.plot.width = 12, repr.plot.height = 6)
num_obs <- 30
beta0 <- 10
beta1 <- -3
sigma <- 3
set.seed(1)  ## 시드 설정
epsilon <- rnorm(n = num_obs, mean = 0, sd = sigma)
x <- 1:num_obs  ## striding
y <- beta0 + beta1*x + epsilon  ## 모회귀모형을 만들어봤음
set.seed(1)  ## 시드 설정
epsilon <- rnorm(n = num_obs, mean = 0, sd = sigma)
x <- 1:num_obs  ## striding
y <- beta0 + beta1*x + epsilon  ## 모회귀모형을 만들어봤음
plot(x, y, pch = 16, col = 'darkorange', lwd = 2, cex = 0.5)
lm_fit <- lm(y~x)  ## 반응변수를 항상 앞으로, 여기선 데이터를 지정해줄 필요가 없는데, 이미 y랑 x가 데이터임
summary(lm_fit)
plot(x, y, pch = 16, col = 'darkorange', cex = 0.5)
abline(lm_fit, col = 'steelblue', lwd = 2)
num_obs <- 30
beta0 <- 10
beta1 <- -3
sigma2 <- 10
epsilon2 <- rnorm(n = num_obs, mean = 0, sd = sigma2)
y2 <- beta0 + beta1*x + epsilon2
sim_model2 <- lm(y2~x)
summary(sim_model2)
num_obs <- 30
beta0 <- 10
beta1 <- -3
sigma3 <- 2
epsilon3 <- rnorm(n = num_obs, mean = 0, sd = sigma3)
y3 <- beta0 + beta1*x + epsilon3
sim_model3 <- lm(y3~x)
summary(sim_model3)
par(mfrow=c(1,2))  ## 그래프를 두 개 그리는 메소드인가봄(plt.subplots()???)
## graphical parameters, drawing multiple plot, multiple funcion ascending row or columns(mfcol)
plot(y2 ~ x, pch=16, col='darkorange',
main =bquote(beta[0] ~ "="~.(beta1) ~ ", " ~
beta[1] ~ "="~.(beta1)~ ", " ~
sigma ~"="~ .(sigma2)),
cex.main=0.5, cex=0.5)
abline(sim_model2, col='steelblue', lwd=3)
plot(y3 ~ x, pch=16, col='darkorange',
main =bquote(beta[0] ~ "="~.(beta1) ~ ", " ~
beta[1] ~ "="~.(beta1)~ ", " ~
sigma ~"="~ .(sigma3)),
cex.main = 0.5, cex=0.5)
abline(sim_model3, col='steelblue', lwd=3)
num_samples = 10000
beta0_hats = rep(0, num_samples)
beta1_hats = rep(0, num_samples)  ## 일단 더미로 리스트를 만든듯?
## 만번 정도 회귀계수 추정치를 구해서 분포를 알아보자
beta0 <- 10
beta1 <- -3
sigma <- 3
n <- 50
set.seed(1004)  ## 천사가 좋으셨나봄
x <- runif(n = n) * 20  ## U(0,1)인 균일분포에다 20 곱함(근데 이럴거면 upper를 20으로...)
temp_dt <- generating_slr(x, beta0, beta1, sigma)
library(ggplot2)
install.packages('ggplot2')
library(ggplot2)
library(ggplot2)
#1. Compute the betas (beta0,...,beta5).
X <- cbind(1, years, gamesyr, bavg, hrunsyr, rbisyr)
#explanatory variables
years <- data$years     #years of experience  /  나이
gamesyr <- data$gamesyr #average games each year / 연 평균 경기 수
bavg <- data$bavg       #batting average  /  타율
rm(list = ls(all=T)) # This code clears all.
load("C:\\Users\\hollyriver\\Documents\\Github\\R\\economatrics\\homeworks\\Quiz\\Homework3_MLB\\mlb1.RData") #load data
ls(data) #list of variables
head(data)
head(data$lsalary)
# dependent variable
lsalary <- data$lsalary #log(salary) variable, responsible variable
#explanatory variables
years <- data$years     #years of experience  /  나이
gamesyr <- data$gamesyr #average games each year / 연 평균 경기 수
bavg <- data$bavg       #batting average  /  타율
hrunsyr <-data$hrunsyr  #home runs
rbisyr <-data$rbisyr    #run batted in  /  플레이 년도 수
#1. Compute the betas (beta0,...,beta5).
X <- cbind(1, years, gamesyr, bavg, hrunsyr, rbisyr)
Y <- lsalary
X
typeof(X)
transform(X)
t(X)
betas <- solve(t(X)%*%X)%*%t(X)%*%Y
betas
betas <- solve(t(X)%*%X)%*%t(X)%*%Y
betas
colnames(betas) <- c('beta0', 'beta1', 'beta2', 'beta3', 'beta4')
betas
colnames(betas) <- c('beta0', 'beta1', 'beta2', 'beta3', 'beta4', 'beta5')
rownames(betas) <- c('beta0', 'beta1', 'beta2', 'beta3', 'beta4', 'beta5')
betas
betas <- solve(t(X)%*%X)%*%t(X)%*%Y
betas
Y_hat <- betas%*%X
Y_hat
betas
X
Y_hat <- X%*%betas
Y_hat
sigma_hat
sigma_hat <- as.numeric(t(Y - Y_hat)(Y - Y_hat))
sigma_hat
sigma_hat <- as.numeric(t(Y - Y_hat)%*%(Y - Y_hat))
sigma_hat
n <- length(lsalary)
sigma_hat <- as.numeric(t(Y - Y_hat)%*%(Y - Y_hat)/(n-k-1))
n <- length(lsalary)
k <- length(X)
k <- length(colnames(X))
Y_hat <- X%*%betas
sigma_hat <- as.numeric(t(Y - Y_hat)%*%(Y - Y_hat)/(n-k-1))
sigma_hat
k
k <- 5
Y_hat <- X%*%betas
sigma_hat <- as.numeric(t(Y - Y_hat)%*%(Y - Y_hat)/(n-k-1))
sigma_hat
sigma2_hat <- as.numeric(t(Y - Y_hat)%*%(Y - Y_hat)/(n-k-1))
sigma2_hat
sigma2_hat <- as.numeric(t(Y - Y_hat)%*%(Y - Y_hat)/(n-k-1))
sigma2_hat
betas_var <- sigma2_hat*(t(X)%*%X)
betas_var
betas_var <- sigma2_hat*solve(t(X)%*%X)
betas_var
betas
betas_var
model <- lm(lsalary ~ years + gamesyr + bavg + hrunsyr + rbisyr, data = mlb.data)
betas_var
betas_cov <- sigma2_hat*solve(t(X)%*%X)
betas_var <- diag(betas_cov)
betas_var
betas_var <- t(diag(betas_cov))
betas_var
betas_var <- diag(betas_cov)
betas_var
se_beta
#---------------standard error of beta--------------------------------------------
se_beta<-sqrt(diag(var_betas))  ## 분산-공분산 행렬의 대각원소
se_beta
source("~/Github/R/Data For Practice/HomePrice_2022_Ch3.R", echo=TRUE)
source("~/Github/R/Data For Practice/HomePrice_2022_Ch3.R", echo=TRUE)
source("~/Github/R/Data For Practice/HomePrice_2022_Ch3.R", echo=TRUE)
se_beta
betas_var <- diag(betas_cov)
source("~/Github/R/economatrics/homeworks/Quiz/Homework3_MLB/OLS_MLB.R", echo=TRUE)
betas_var
beta_hats <- solve(t(X)%*%X)%*%t(X)%*%Y
beta_hats
Y_hat <- X%*%beta_hats
sigma2_hat <- as.numeric(t(Y - Y_hat)%*%(Y - Y_hat)/(n-k-1))
betas_cov <- sigma2_hat*solve(t(X)%*%X)
betas_var <- diag(betas_cov)
betas_var
betas_hat <- solve(t(X)%*%X)%*%t(X)%*%Y
betas_hat
Y_hat <- X%*%betas_hat
sigma2_hat <- as.numeric(t(Y - Y_hat)%*%(Y - Y_hat)/(n-k-1))
se_betas <- sqrt(betas_var)
t_values <- betas_hat/se_betas
t_values
se_betas <- sqrt(betas_var); se_betas
betas_hat
round(betas_hat, 5)
model <- lm(lsalary ~ years + gamesyr + bavg + hrunsyr + rbisyr, data = mlb.data)
summary(model)
model$coefficients
round(model$coefficients, 5)
betas_var
betas_hat
round(model$coefficients, 5)
round(betas_hat, 5)
round(model$coefficients, 5)
t(round(betas_hat, 5))
round(model$coefficients, 5)
se_betas
summary(model)
summary(model)$Coefficients
summary(model)$coefficients
summary(model)$coefficients['Std. Error']
summary(model)$coefficients[1]
summary(model)$coefficients[1, :]
summary(model)$coefficients[:, 1]
summary(model)$coefficients[1,1]
summary(model)$coefficients[1,]
summary(model)$coefficients[,1]
summary(model)$coefficients[,2]
round(summary(model)$coefficients[,2])
round(summary(model)$coefficients[,2], 5)
se_betas
round(se_betas, 5)
round(summary(model)$coefficients[,2], 5)
t_values
se_betas <- sqrt(betas_var); se_betas
round(betas_hat, 5)
t_values <- betas_hat/se_betas
t_values
betas_hat
2*pt(q, df = n-k-1)
2*pt(as.numeric(q), df = n-k-1)
source("~/Github/R/economatrics/homeworks/Quiz/Homework3_MLB/OLS_MLB.R", echo=TRUE)
install.packages("corrplot")
for (q in t_values) {
2*pt(as.numeric(q), df = n-k-1)
}
print(2*pt(as.numeric(q), df = n-k-1))
source("~/Github/R/economatrics/homeworks/Quiz/Homework3_MLB/OLS_MLB.R", echo=TRUE)
#4. Compute the p-values for the betas.
t_values
#4. Compute the p-values for the betas.
t_values[1]
qt(t_values[1], df = n-k-1)
pt(t_values[1], df = n-k-1)
pt(q = t_values[1], df = n-k-1)
n
n-k-1
pt(q = t_values[1], df = n-k-1, lower.tail = FALSE)
pt(q = q, df = n-k-1)
for (q in t_values) {
pt(q = q, df = n-k-1)
}
for (q in t_values) {
pt(q = q, df = n-k-1)
}
print(pt(q = q, df = n-k-1))
for (q in t_values) {
print(pt(q = q, df = n-k-1))
}
print(pt(q = q, df = n-k-1, lower.tail = FALSE))
for (q in t_values) {
print(pt(q = q, df = n-k-1, lower.tail = FALSE))
}
source("~/Github/R/economatrics/homeworks/Quiz/Homework3_MLB/OLS_MLB.R", echo=TRUE)
source("~/Github/R/economatrics/homeworks/Quiz/Homework3_MLB/OLS_MLB.R", echo=TRUE)
install.packages("corrplot")
for (q in t_values) {
print(paste(colnames(q)+pt(q = q, df = n-k-1, lower.tail = FALSE)))
}
for (q in t_values) {
print(paste(colnames(q)+pt(q = q, df = n-k-1, lower.tail = FALSE)))
}
se_betas <- sqrt(betas_var); se_betas
t_values <- betas_hat/se_betas
t_values
for (q in t_values) {
print(paste(colnames(q)+pt(q = q, df = n-k-1, lower.tail = FALSE)))
}
colnames(t_values[1])
rownames(t_values[1])
t_values[1]
lues
t_values
print(pt(q = q, df = n-k-1, lower.tail = FALSE))
source("~/Github/R/economatrics/homeworks/Quiz/Homework3_MLB/OLS_MLB.R", echo=TRUE)
for (q in t_values) {
print(pt(q = q, df = n-k-1, lower.tail = FALSE))
}
round(betas_var, 5)
round(betas_hat, 5)
source("~/Github/R/economatrics/homeworks/Quiz/Homework3_MLB/OLS_MLB.R", echo=TRUE)
for (q in t_values) {
print(pt(q = q, df = n-k-1, lower.tail = FALSE))
}
for (q in t_values) {
print(pt(q = q, df = n-k-1, lower.tail = FALSE))
}
rownames(t_values)
rownames(t_values)[1]
source("~/Github/R/economatrics/homeworks/Quiz/Homework3_MLB/OLS_MLB.R", echo=TRUE)
for (i in c(1:6)) {
for (i in c(1:6)) {
}
))
for (i in c(1:6)) {
print(paste(rownames(t_values)[i]+pt(q = q, df = n-k-1, lower.tail = FALSE)))
}
print(paste(rownames(t_values)[i]+pt(q = t_values[i], df = n-k-1, lower.tail = FALSE)))
for (i in c(1:6)) {
print(paste(rownames(t_values)[i]+pt(q = t_values[i], df = n-k-1, lower.tail = FALSE)))
}
n
t_values[i]
for (i in c(1:6)) {
print(pt(q = t_values[i], df = n-k-1, lower.tail = FALSE))
}
for (i in c(1:6)) {
}
for (i in c(1:6)) {
}
for (i in c(1:6)) {
print(paste(rownames(t_values)[i]+as.character(pt(q = t_values[i], df = n-k-1, lower.tail = FALSE))))
}
for (i in c(1:6)) {
print(paste(rownames(t_values)[i]+as.character(pt(q = t_values[i], df = n-k-1, lower.tail = FALSE))))
}
rownames(t_values)
rownames(t_values)[1]
rownames(t_values)[2]
for (i in c(1:6)) {
paste(rownames(t_values)[i]+as.character(pt(q = t_values[i], df = n-k-1, lower.tail = FALSE)))
}
for (i in c(1:6)) {
paste(rownames(t_values)[i]+as.character(pt(q = t_values[i], df = n-k-1, lower.tail = FALSE)))
}
paste(rownames(t_values)[i],as.character(pt(q = t_values[i], df = n-k-1, lower.tail = FALSE)))
for (i in c(1:6)) {
paste(rownames(t_values)[i],as.character(pt(q = t_values[i], df = n-k-1, lower.tail = FALSE)))
}
print(paste(rownames(t_values)[i],as.character(pt(q = t_values[i], df = n-k-1, lower.tail = FALSE))))
for (i in c(1:6)) {
print(paste(rownames(t_values)[i],as.character(pt(q = t_values[i], df = n-k-1, lower.tail = FALSE))))
}
for (i in c(1:6)) {
print(paste(rownames(t_values)[i],':',as.character(pt(q = t_values[i], df = n-k-1, lower.tail = FALSE))))
}
for (q in t_values) {
print(pt(q = q, df = n-k-1, lower.tail = FALSE))
}
X <- cbind(1, years, gamesyr, bavg, hrunsyr, rbisyr)  ## explanatory variables matrix
Y <- lsalary  ## responsible variable matrix
betas_hat <- solve(t(X)%*%X)%*%t(X)%*%Y
round(betas_hat, 5)
n <- length(lsalary)
k <- 5
Y_hat <- X%*%betas_hat
sigma2_hat <- as.numeric(t(Y - Y_hat)%*%(Y - Y_hat)/(n-k-1))
betas_cov <- sigma2_hat*solve(t(X)%*%X)
betas_var <- diag(betas_cov)
round(betas_var, 5)
se_betas <- sqrt(betas_var); se_betas
t_values <- betas_hat/se_betas
t_values
for (q in t_values) {
print(pt(q = q, df = n-k-1, lower.tail = FALSE))
}
for (q in t_values) {
print(pt(q = q, df = n-k-1, lower.tail = FALSE))
}
X <- cbind(1, years, gamesyr, bavg, hrunsyr, rbisyr)  ## explanatory variables matrix
Y <- lsalary  ## responsible variable matrix
betas_hat <- solve(t(X)%*%X)%*%t(X)%*%Y
round(betas_hat, 5)
n <- length(lsalary)
k <- 5
Y_hat <- X%*%betas_hat
sigma2_hat <- as.numeric(t(Y - Y_hat)%*%(Y - Y_hat)/(n-k-1))
betas_cov <- sigma2_hat*solve(t(X)%*%X)
betas_var <- diag(betas_cov)
round(betas_var, 5)
se_betas <- sqrt(betas_var); se_betas
t_values <- betas_hat/se_betas
t_values
for (q in t_values) {
print(pt(q = q, df = n-k-1, lower.tail = FALSE))
}
