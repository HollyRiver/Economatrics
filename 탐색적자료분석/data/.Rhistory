qqline(residual1, col = 2)
par(mfrow = c(1,2))
hist(residual1)
qqnorm(residual1, pch = 16)  ## output QQplot following normal distribution.
qqline(residual1, col = 'red')
par(mfrow = c(1,2))
hist(residual1)
qqnorm(residual1, pch = 16)  ## output QQplot following normal distribution.
abline(residual1, col = 'red')  ## abline과 비슷함.
par(mfrow = c(1,2))
hist(residual1)
qqnorm(residual1, pch = 16)  ## output QQplot following normal distribution.
qqline(residual1, col = 'red')  ## abline과 비슷함.
shapiro.test(residual1)
install.packages('lmtest')
install.packages('lmtest')
library(lmtest)
library(lmtest)
dwtest(model1, alternative = 'two.sided')
residual1[-1]
residual1
residual1[-1]
residual1
residual1[-1]
cor(et_10, et_1)
et_10 <- residual1[-10]  ## exclude 10th value
et_1 <- residual1[-1]  ## exclude 1st value
cor(et_10, et_1)
dwtest(model1)
dwtest(model1, alternative = 'two.sided')
dwtest(model1, alternative = 'less')
n <- 200
x <- round(runif(n, 0, 10), 3)  ## min = 0, max = 10
epsilon <- rnorm(n, 0, 5)  ## mean = 0, sd = 5
beta_0 = 3
beta_1 = 5
y <- beta_0 + beta_1*x + epsilon
plot(y~x, pch = 16,
cex = 2, color = 'darkorange')
n <- 200
x <- round(runif(n, 0, 10), 3)  ## min = 0, max = 10
epsilon <- rnorm(n, 0, 5)  ## mean = 0, sd = 5
beta_0 = 3
beta_1 = 5
y <- beta_0 + beta_1*x + epsilon
plot(y~x, pch = 16,
cex = 2, col = 'darkorange')
n <- 200
x <- round(runif(n, 0, 10), 3)  ## min = 0, max = 10
epsilon <- rnorm(n, 0, 5)  ## mean = 0, sd = 5
beta_0 = 3
beta_1 = 5
y <- beta_0 + beta_1*x + epsilon
plot(y~x, pch = 16,
cex = 1, col = 'darkorange')
model2 <- lm(y~x)
summary(model2)
residual2 <- model2$residuals
residual2
residual2 <- model2$residuals
plot(residual2~x, pch = 16, xlab = 'Value of x', ylab = 'Residual', main = 'Residual Plot')
residual2 <- model2$residuals
plot(residual2~x, pch = 16, xlab = 'Value of x', ylab = 'Residual', main = 'Residual Plot', cex = 0.5)
residual2 <- model2$residuals
plot(residual2~x, pch = 16, xlab = 'Value of x', ylab = 'Residual', main = 'Residual Plot', cex = 0.5)
abline(h = 0, lty = 2, col = 'grey')
plot(rstandard(model2)~x, pch = 16, xlab = 'Value of x', ylab = 'Residual', main = 'Standarized Residual plot')
plot(rstandard(model2)~x, pch = 16, xlab = 'Value of x', ylab = 'Residual', main = 'Standarized Residual plot', cex = 0.5)
plot(rstandard(model2)~x, pch = 16, xlab = 'Value of x', ylab = 'Residual', main = 'Standarized Residual plot', cex = 0.5, main.cex = 0.5)
plot(rstandard(model2)~x, pch = 16, xlab = 'Value of x', ylab = 'Residual', main = 'Standarized Residual plot', cex = 0.5, cex.main = 0.5)
plot(rstandard(model2)~x, pch = 16, xlab = 'Value of x', ylab = 'Residual', main = 'Standarized Residual plot', cex = 0.5, cex.main = 1)
plot(rstandard(model2)~x, pch = 16, xlab = 'Value of x', ylab = 'Residual', main = 'Standarized Residual plot', cex = 0.5, cex.main = 1)
abline(h = 0, lty = 2, col = 'grey')
plot(rstandard(model2)~x, pch = 16, xlab = 'Value of x', ylab = 'Residual', main = 'Standarized Residual plot', cex = 0.5, cex.main = 1)
abline(h = 0, lty = 2, col = 'grey')
abline(h = 2, lty = 2, col = 'red')
abline(h = -2, lty = 2, col = 'red')
hist(model2$residuals)
hist(model2$residuals)
curve(dnorm(x, 0, 5), col = 'darkblue', add = TRUE)
hist(model2$residuals, prob = T, breaks = 10)
curve(dnorm(x, 0, 5), col = 'darkblue', add = TRUE)
hist(model2$residuals, prob = T, breaks = 20)
curve(dnorm(x, 0, 5), col = 'darkblue', add = TRUE)
hist(rstandard(model2), prob = T, breaks = 20)
curve(dnorm(x, 0, 1), col = 'darkblue', add = TRUE)
dwtest(model2, alternative = 'two.sided')
n <- 200
x <- round(runif(n, 0, 10), 3)
epsilon <- rnorm(n, 0, 5)
beta_0 <- 3
beta_1 <- 0.9
y <- beta_0 + beta_1*(x**2) + epsilon
plot(y~x, pch = 16, cex = 0.5, col = 'darkorange')
model3 <- lm(y~x)
summary(model3)
plot(model3$residuals ~ x, pch = 16)
plot(model3$residuals ~ x, pch = 16, cex = 0.5)
abline(h = 0, lty = 2, col = 'grey')
plot(model3$residuals ~ x, pch = 16, cex = 0.5, ylab = 'Residual')
abline(h = 0, lty = 2, col = 'grey')
plot(model3$residuals ~ x, pch = 16, cex = 0.5, ylab = 'Residual', main = 'Residual Plot')
abline(h = 0, lty = 2, col = 'grey')
plot(model3$residuals ~ x, pch = 16, cex = 0.5, ylab = 'Residual', main = 'Residual Plot', cex.main = 1)
abline(h = 0, lty = 2, col = 'grey')
adj_model3 <- lm(y~x + I(x**2))
summary(adj_model3)
plot(adj_model3$residuals, pch = 16, ylab = 'Residuals', main = 'Residual Plot in Adjusted model')
plot(adj_model3$residuals, pch = 16, ylab = 'Residuals', main = 'Residual Plot in Adjusted model', cex = 0.5, cex.main = 1)
plot(adj_model3$residuals, pch = 16, ylab = 'Residuals', main = 'Residual Plot in Adjusted model', cex = 0.5, cex.main = 1)
abline(h = 0, lty = 2, col = 'grey')
n <- 500
x <- round(runif(n, 0, 10), 2)
epsilon <- rnorm(n, 0, sd = sqrt(x))
n <- 500
x <- round(runif(n, 0, 10), 2)
epsilon <- rnorm(n, 0, sd = sqrt(x))  ## sd in r function can be inputed vector
beta_0 <- 10
beta_1 <- 2
y <- beta_0 + beta_1*x + epsilon
plot(y~x, pch = 16, col = 'darkorange')
n <- 500
x <- round(runif(n, 0, 10), 2)
epsilon <- rnorm(n, 0, sd = sqrt(x))  ## sd in r function can be inputed vector
beta_0 <- 10
beta_1 <- 2
y <- beta_0 + beta_1*x + epsilon
plot(y~x, pch = 16, col = 'darkorange', cex = 0.5)
model4 <- lm(y~x)
summary(model4)
plot(model4$residuals~x, pch = 16, ylab = 'Residuals')
plot(model4$residuals~x, pch = 16, ylab = 'Residuals', cex = 0.5)
plot(model4$residuals~x, pch = 16, ylab = 'Residuals', cex = 0.5)
abline(h = 0, lty = 2, lwd = 0.5, col = 'grey)
plot(model4$residuals~x, pch = 16, ylab = 'Residuals', cex = 0.5)
abline(h = 0, lty = 2, lwd = 0.5, col = 'grey')
plot(model4$residuals~x, pch = 16, ylab = 'Residuals', cex = 0.3)
abline(h = 0, lty = 2, lwd = 0.5, col = 'grey')
plot(model4$residuals~x, pch = 16, ylab = 'Residuals', cex = 0.4)
abline(h = 0, lty = 2, lwd = 0.5, col = 'grey')
plot(model4$residuals~x, pch = 16, ylab = 'Residuals', cex = 0.35)
abline(h = 0, lty = 2, lwd = 0.5, col = 'grey')
par(mfrow = c(1,2))
plot(sqrt(y)~x, pch = 16, col = 'darkorange', cex = 0.5)
plot(log(y)~x, pch = 16, col = 'darkorange', cex = 0.5)
adj_model4 <- lm(sqrt(y)~x)
summary(adj_model4)
plot(adj_model4$residuals~x, pch = 16, col = 'darkorange', cex = 0.5)
adj_model4_2 <- lm(log(y)~x)
summary(adj_model4_2)
par(mfrow = c(1,2))
plot(adj_model4$residuals~x, pch = 16, col = 'darkorange', cex = 0.5)
plot(adj_model4_2$residuals~x, pch = 16, col = 'darkorange', cex = 0.5)
par(mfrow = c(1,2))
plot(adj_model4$residuals~x, pch = 16, col = 'darkorange', cex = 0.3)
plot(adj_model4_2$residuals~x, pch = 16, col = 'darkorange', cex = 0.3)
par(mfrow = c(1,2))
plot(adj_model4$residuals~x, pch = 16, col = 'darkorange', cex = 0.3)
abline(h = 0, lty = 2, col = 'grey')
plot(adj_model4_2$residuals~x, pch = 16, col = 'darkorange', cex = 0.3)
abline(h = 0, lty = 2, col = 'grey')
par(mfrow=c(1,2))
hist(resid(adj_model4), main = "제곱근 변환")
hist(resid(adj_model4_2), main= 'log 변환')
par(mfrow=c(1,2))
hist(resid(adj_model4), main = "제곱근 변환", prob = T)
curve(qnorm(n, 0, 1))
par(mfrow=c(1,2))
hist(resid(adj_model4), main = "제곱근 변환", prob = T)
curve(qnorm(n, 0, 1), add = TRUE)
par(mfrow=c(1,2))
hist(resid(adj_model4), main = "제곱근 변환", prob = T)
curve(dnorm(x, 0, 1), add = TRUE)
hist(resid(adj_model4_2), main= 'log 변환', prob = T)
par(mfrow=c(1,2))
hist(resid(adj_model4), main = "제곱근 변환", prob = T)
hist(resid(adj_model4_2), main= 'log 변환', prob = T)
n <- 200
x <- round(runif(n, 0, 10), 3)
epsilon <- rt(n, 3)
beta_0 <- 3
beta_1 <- 2
y <- beta_0 + beta_1 * x + epsilon
plot(y~x, pch = 16, cex = 0.5, col = 'darkorange')
model <- lm(y~x)
summary(model)
plot(model$residuals ~ x, pch = 16, ylab = 'Residual', main = 'Residual Plot')
abline(h = 0, lty = 2, col = 'grey)
plot(model$residuals ~ x, pch = 16, ylab = 'Residual', main = 'Residual Plot')
abline(h = 0, lty = 2, col = 'grey')
plot(model$residuals ~ x, pch = 16, ylab = 'Residual', main = 'Residual Plot', cex = 0.5, cex.main = 1)
abline(h = 0, lty = 2, col = 'grey')
plot(rstandard(model) ~ x, pch = 16, ylab = 'Standarized Residual', main = 'Residual Plot', cex = 0.5, cex.main = 1)
abline(h = c(-3, 0, 3), lty = 2, col = c(2, 1, 2))
par(mfrow = c(1,2))
hist(model$residuals, prob = T, main = '잔차의 히스토그램', cex.main = 1)
curve(dnorm(x, 0, sd(model$residuals)), col = 'darkblue', lwd = 2, add = TRUE)
par(mfrow = c(1,2))
hist(model$residuals, prob = T, main = '잔차의 히스토그램', breaks = 10, cex.main = 1)
curve(dnorm(x, 0, sd(model$residuals)), col = 'darkblue', lwd = 2, add = TRUE)
par(mfrow = c(1,2))
hist(model$residuals, prob = T, main = '잔차의 히스토그램', breaks = 20, cex.main = 1)
curve(dnorm(x, 0, sd(model$residuals)), col = 'darkblue', lwd = 2, add = TRUE)
par(mfrow = c(1,2))
hist(model$residuals, prob = T, main = '잔차의 히스토그램', breaks = 20, cex.main = 1)
curve(dnorm(x, 0, sd(model$residuals)), col = 'darkblue', lwd = 2, add = TRUE)
hist(rstandard(model), prob = T, main = '표준화된 잔차의 히스토그램', breaks = 20, cex.main = 1)
curve(dnorm(x, 0, 1), col = 'darkblue', lwd = 2, add = TRUE)
qqplot(model)
qqplot(model$residuals)
qqnorm(model$residuals)
qqnorm(model$residuals, pch = 16, cex = 0.5)
qqline(model$residuals)
qqnorm(model$residuals, pch = 16, cex = 0.5)
qqline(model$residuals, col = 2)
qqnorm(model$residuals, pch = 16, cex = 0.5)
qqline(model$residuals, col = 2, lwd = 2)
qqnorm(model$residuals, pch = 16, cex = 0.5)
qqline(model$residuals, col = 2, lty = 2)
shapiro.test(model)
shapiro.test(model$residuals)
which(abs(rstandard(model)) > 3)  ## absolute value of standarized residuals.
options(repr.plot.width = 12, repr.plot.height = 6)
install.packages('lmtest')
library(lmtest)
library(lmtest)
n <- 200
x <- round(runif(n, 0, 10), 3)
epsilon <- rt(n, 3)
beta_0 <- 3
beta_1 <- 2
y <- beta_0 + beta_1 * x + epsilon
plot(y~x, pch = 16, cex = 0.5, col = 'darkorange')
model <- lm(y~x)
summary(model)
plot(model$residuals ~ x, pch = 16, ylab = 'Residual', main = 'Residual Plot', cex = 0.5, cex.main = 1)
abline(h = 0, lty = 2, col = 'grey')
plot(rstandard(model) ~ x, pch = 16, ylab = 'Standarized Residual', main = 'Residual Plot', cex = 0.5, cex.main = 1)
abline(h = c(-3, 0, 3), lty = 2, col = c(2, 1, 2))
par(mfrow = c(1,2))
hist(model$residuals, prob = T, main = '잔차의 히스토그램', breaks = 20, cex.main = 1)
curve(dnorm(x, 0, sd(model$residuals)), col = 'darkblue', lwd = 2, add = TRUE)  ## 표준편차는 잔차의 표준편차를 사용해야 함.
hist(rstandard(model), prob = T, main = '표준화된 잔차의 히스토그램', breaks = 20, cex.main = 1)
curve(dnorm(x, 0, 1), col = 'darkblue', lwd = 2, add = TRUE)
qqnorm(model$residuals, pch = 16, cex = 0.5)
qqline(model$residuals, col = 2, lty = 2)
shapiro.test(model$residuals)
which(abs(rstandard(model)) > 3)  ## absolute value of standarized residuals.
n <- 200
x <- round(runif(n, 0, 10), 3)
epsilon <- rt(n, 3)
beta_0 <- 3
beta_1 <- 2
y <- beta_0 + beta_1 * x + epsilon
plot(y~x, pch = 16, cex = 0.5, col = 'darkorange')
model <- lm(y~x)
summary(model)
plot(model$residuals ~ x, pch = 16, ylab = 'Residual', main = 'Residual Plot', cex = 0.5, cex.main = 1)
abline(h = 0, lty = 2, col = 'grey')
plot(rstandard(model) ~ x, pch = 16, ylab = 'Standarized Residual', main = 'Residual Plot', cex = 0.5, cex.main = 1)
abline(h = c(-3, 0, 3), lty = 2, col = c(2, 1, 2))
par(mfrow = c(1,2))
hist(model$residuals, prob = T, main = '잔차의 히스토그램', breaks = 20, cex.main = 1)
curve(dnorm(x, 0, sd(model$residuals)), col = 'darkblue', lwd = 2, add = TRUE)  ## 표준편차는 잔차의 표준편차를 사용해야 함.
hist(rstandard(model), prob = T, main = '표준화된 잔차의 히스토그램', breaks = 20, cex.main = 1)
curve(dnorm(x, 0, 1), col = 'darkblue', lwd = 2, add = TRUE)
qqnorm(model$residuals, pch = 16, cex = 0.5)
qqline(model$residuals, col = 2, lty = 2)
shapiro.test(model$residuals)
which(abs(rstandard(model)) > 3)  ## absolute value of standarized residuals.
summary(adj_model)
x1 <- x[-which(abs(rstandard(model)) > 3)]
y1 <- y[-which(abs(rstandard(model)) > 3)]
## 해당하는 녀석들을 제외함, 그리고 다시 분석할거임.
adj_model <- lm(y1~x1)
summary(adj_model)
par(mfrow = c(1,2))
plot(adj_model$residuals~x, pch = 16, cex = 0.5, ylab = 'Residual', main = 'Residual Plot', cex.main = 1)
par(mfrow = c(1,2))
plot(adj_model$residuals~x1, pch = 16, cex = 0.5, ylab = 'Residual', main = 'Residual Plot', cex.main = 1)
par(mfrow = c(1,2))
plot(adj_model$residuals~x1, pch = 16, cex = 0.5, ylab = 'Residual', main = 'Residual Plot', cex.main = 1)
abline(h = c(-2,0,2), col = c('red','grey','red'), lty = 2)
par(mfrow = c(1,2))
plot(adj_model$residuals~x1, pch = 16, cex = 0.5, ylab = 'Residual', main = 'Residual Plot', cex.main = 1)
abline(h = c(-3,0,3), col = c('red','grey','red'), lty = 2)
sd_residual <- std(adj_model$residuals)
sd_residual <- sd(adj_model$residuals)
par(mfrow = c(1,2))
plot(adj_model$residuals~x1, pch = 16, cex = 0.5, ylab = 'Residual', main = 'Residual Plot', cex.main = 1)
sd_residual <- sd(adj_model$residuals)
abline(h = c(-2*sd_residual,0,2*sd_residual), col = c('red','grey','red'), lty = 2)
par(mfrow = c(1,2))
plot(adj_model$residuals~x1, pch = 16, cex = 0.5, ylab = 'Residual', main = 'Residual Plot', cex.main = 1)
sd_residual <- sd(adj_model$residuals)
abline(h = c(-3*sd_residual,0,3*sd_residual), col = c('red','grey','red'), lty = 2)
par(mfrow = c(1,2))
plot(adj_model$residuals~x1, pch = 16, cex = 0.5, ylab = 'Residual', main = 'Residual Plot', cex.main = 1)
sd_residual <- sd(adj_model$residuals)
abline(h = c(-3*sd_residual,0,3*sd_residual), col = c('red','grey','red'), lty = 2)
plot(rstandard(adj_model)~x1, pch = 16, cex = 0.5, ylab = 'Standarized Residual', main = 'Standarized Residual Plot', cex.main = 1)
abline(h = c(-3,0,3), col = c('red','grey','red'), lty = 2)
par(mfrow = c(1,2))
plot(adj_model$residuals~x1, pch = 16, cex = 0.5, ylab = 'Residual', main = 'Residual Plot', cex.main = 1, cex.ylab = 0.8)
sd_residual <- sd(adj_model$residuals)
abline(h = c(-3*sd_residual,0,3*sd_residual), col = c('red','grey','red'), lty = 2)
plot(rstandard(adj_model)~x1, pch = 16, cex = 0.5, ylab = 'Standarized Residual', main = 'Standarized Residual Plot', cex.main = 1)
abline(h = c(-3,0,3), col = c('red','grey','red'), lty = 2)
par(mfrow = c(1,2))
plot(adj_model$residuals~x1, pch = 16, cex = 0.5, ylab = 'Residual', main = 'Residual Plot', cex.main = 1)
sd_residual <- sd(adj_model$residuals)
abline(h = c(-3*sd_residual,0,3*sd_residual), col = c('red','grey','red'), lty = 2)
plot(rstandard(adj_model)~x1, pch = 16, cex = 0.5, ylab = 'Standarized Residual', main = 'Standarized Residual Plot', cex.main = 1)
abline(h = c(-3,0,3), col = c('red','grey','red'), lty = 2)
n <- 200
x <- sort(round(runif(n, 0, 10), 3))  ## sort_values(ascending = False)
epsilon <- c(rnorm(1))  ## epsilon
for (k in 2:n){
epsilon[k] <- 0.5*epsilon[k-1] + rnorm(1)  ## 잔차가 직전값에 영향을 받음
}
beta_0 <- 3
beta_1 <- 0.9
y <- beta_0 + beta_1 * x + epsilon
plot(y~x, pch = 16, cex = 0.5, col = 'darkorange')
model <- lm(y~x)
summary(model)
plot(model$residuals~x, pch = 16, ylab = 'Residual', main = 'Residual Plot')
abline(h = 0, lty = 2, col = 'grey')
plot(model$residuals~x, pch = 16, ylab = 'Residual', main = 'Residual Plot', cex = 0.5)
abline(h = 0, lty = 2, col = 'grey')
dwtest(model, alternative = 'two.sided')
plot(model$residuals ~ x, pch = 16, ylab = 'Residual', main = 'Line the cross Residuals', type = 'line')
plot(model$residuals ~ x, pch = 16, ylab = 'Residual', main = 'Line the cross Residuals', lwd = 1)
plot(model$residuals ~ x, ylab = 'Residual', main = 'Line the cross Residuals', lwd = 1)
plot(model$residuals ~ x, ylab = 'Residual', main = 'Line the cross Residuals', type = 'l')
plot(model$residuals ~ x, ylab = 'Residual', main = 'Line the cross Residuals', type = 'line')
plot(model$residuals ~ x, ylab = 'Residual', main = 'Line the cross Residuals', type = 'lineed')
plot(model$residuals ~ x, ylab = 'Residual', main = 'Line the cross Residuals', type = 'lined')
plot(model$residuals ~ x, ylab = 'Residual', main = 'Line the cross Residuals', type = 'dashed')
plot(model$residuals ~ x, ylab = 'Residual', main = 'Line the cross Residuals', type = 'l')
plot(model$residuals ~ x, ylab = 'Residual', main = 'Line the cross Residuals', type = 'l', lwd = 0.5)
plot(model$residuals ~ x, ylab = 'Residual', main = 'Line the cross Residuals', type = 'l', lwd = 0.5)
abline(h = 0, col = 'grey', lwd = 2)
plot(model$residuals ~ x, ylab = 'Residual', main = 'Line the cross Residuals', type = 'l', lwd = 0.5)
abline(h = 0, col = 'grey', lty = 2)
R.Version()
summary(L_model)$coef[1,2]  ## beta0 표준오차, 데이터프레임 다루듯 직접 부를 수 있음
setwd("C:\\Users\\hollyriver\\Documents\\Github\\Economatrics\\RA course\\data")
setwd("C:\\Users\\hollyriver\\Documents\\Github\\Economatrics\\RA course\\data")
dt <- data.frame(x = c(4,8,9,8,8,12,6,10,6,9),
y = c(9,20,22,15,17,30,18,25,10,20))
dt
ggplot(dt) + geom_point(aes(x, y), col = 'darkorange', size = 3) + xlab("광고료") + ylab('총판매액') +
theme_bw() +
theme(axis.title = element_text(size = 14)) ## 테마, 글씨크기
library(ggplot2)
R.Version()
install.packages('ggplot2')
install.packages("ggplot2")
library(ggplot2)
help()
install.packages('installr')
library(installr)
check.for.updates.R()
install.R()
R.Version()
R.Version()
options(repr.plot.width = 12, repr.plot.height = 6)
num_obs <- 30
beta0 <- 10
beta1 <- -3
sigma <- 3
set.seed(1)  ## 시드 설정
epsilon <- rnorm(n = num_obs, mean = 0, sd = sigma)
x <- 1:num_obs  ## striding
y <- beta0 + beta1*x + epsilon  ## 모회귀모형을 만들어봤음
set.seed(1)  ## 시드 설정
epsilon <- rnorm(n = num_obs, mean = 0, sd = sigma)
x <- 1:num_obs  ## striding
y <- beta0 + beta1*x + epsilon  ## 모회귀모형을 만들어봤음
plot(x, y, pch = 16, col = 'darkorange', lwd = 2, cex = 0.5)
lm_fit <- lm(y~x)  ## 반응변수를 항상 앞으로, 여기선 데이터를 지정해줄 필요가 없는데, 이미 y랑 x가 데이터임
summary(lm_fit)
plot(x, y, pch = 16, col = 'darkorange', cex = 0.5)
abline(lm_fit, col = 'steelblue', lwd = 2)
num_obs <- 30
beta0 <- 10
beta1 <- -3
sigma2 <- 10
epsilon2 <- rnorm(n = num_obs, mean = 0, sd = sigma2)
y2 <- beta0 + beta1*x + epsilon2
sim_model2 <- lm(y2~x)
summary(sim_model2)
num_obs <- 30
beta0 <- 10
beta1 <- -3
sigma3 <- 2
epsilon3 <- rnorm(n = num_obs, mean = 0, sd = sigma3)
y3 <- beta0 + beta1*x + epsilon3
sim_model3 <- lm(y3~x)
summary(sim_model3)
par(mfrow=c(1,2))  ## 그래프를 두 개 그리는 메소드인가봄(plt.subplots()???)
## graphical parameters, drawing multiple plot, multiple funcion ascending row or columns(mfcol)
plot(y2 ~ x, pch=16, col='darkorange',
main =bquote(beta[0] ~ "="~.(beta1) ~ ", " ~
beta[1] ~ "="~.(beta1)~ ", " ~
sigma ~"="~ .(sigma2)),
cex.main=0.5, cex=0.5)
abline(sim_model2, col='steelblue', lwd=3)
plot(y3 ~ x, pch=16, col='darkorange',
main =bquote(beta[0] ~ "="~.(beta1) ~ ", " ~
beta[1] ~ "="~.(beta1)~ ", " ~
sigma ~"="~ .(sigma3)),
cex.main = 0.5, cex=0.5)
abline(sim_model3, col='steelblue', lwd=3)
num_samples = 10000
beta0_hats = rep(0, num_samples)
beta1_hats = rep(0, num_samples)  ## 일단 더미로 리스트를 만든듯?
## 만번 정도 회귀계수 추정치를 구해서 분포를 알아보자
beta0 <- 10
beta1 <- -3
sigma <- 3
n <- 50
set.seed(1004)  ## 천사가 좋으셨나봄
x <- runif(n = n) * 20  ## U(0,1)인 균일분포에다 20 곱함(근데 이럴거면 upper를 20으로...)
temp_dt <- generating_slr(x, beta0, beta1, sigma)
library(ggplot2)
install.packages('ggplot2')
library(ggplot2)
library(ggplot2)
quit()
data1 <- data.frame(id = c(23, 4, 78, 54),
mid = c(43, 56, 29, 99))
data1
data2 <- data.frame(id = c(4, 23, 54, 70),
final = c(77, 2, 19, 31))
data2
data1_2 <- merge(x = data1, y = data2,
by.x = "id", by.y = "id")
data1_2
data1_2 <- merge(x = data1, y = data2,
by.x = "id", by.y = "id", all = TRUE)
data1_2
gr <- c(1, 2, 1, 1, 2)
gr <- c(1, 2, 1, 1, 2)
gr <- factor(gr)
gr
gr <- c(1, 2, 1, 1, 2)
table(gr)
table(gr)
gr <- factor(gr)  ## 범주형으로 분류
levels(gr) <- c("low", "high")
gr
score <- c(98, 82, 45, 23, 74)
score_split <- split(score, gr)
score_split
gr
spl <- c("low", "high", "low", "low", "high")
split(score, gr)
score1 <- score[gr == "low"]
score2 <- score[gr == "high"]
score1
rbinom(299, 1, 0.5)
rbinom(1, 299, 0.5)
geyser <- read.table("geyser299.txt", header = TRUE)
setwd("C:/Users/hollyriver/Documents/Github/R/탐색적자료분석/data")
geyser <- read.table("geyser299.txt", header = TRUE)
geyser_x <- cbind(geyser)
geyser_x
geyser_x <- cbind(geyser, x)
geyser_x <- cbind(geyser, x)
x
x <- rbinom(299, 1, 0.5)  ## 확률이 0.5인 베르누이 시행을 299회 반복
geyser_x <- cbind(geyser, x)
geyser_x
sink("geyser.out")
summary(geyser_x)
sink()
summary(geyser_x)
setwd("C:/Users/hollyriver/Documents/Github/R/탐색적자료분석/data")
read.csv("score1.csv", header = TRUE)
library(foreign)  ## SPSS, SAS 데이터 파일을 읽을 수 있음.
ee <- read.spss("EEstock2000.sav")
str(ee)
ls()  ## 오브젝트 리스트 확인
temp <- 1
x <- 2
rm(temp, x)
ls()
rm(list = ls()) ## 오브젝트 리스트에 해당하는 것을 모두 제거
ls()
x <- rbinom(299, 1, 0.5)  ## 확률이 0.5인 베르누이 시행을 299회 반복
geyser <- read.table("geyser299.txt", header = TRUE)
geyser_x <- cbind(geyser, x)
write.table(geyser_x, "geyser_2.txt")  ## 저장된 데이터를 파일로 저장
sink("geyser.out")  ## 앞으로의 출력을 파일(geyser.out)에 보냄, 파일이 없으면 생성
summary(geyser_x)
sink()              ## 앞으로의 출력을 콘솔에 보냄
temp <- 1
x <- 2
ls()  ## 오브젝트 리스트 확인
rm(temp, x)
ls()
rm(list = ls()) ## 오브젝트 리스트에 해당하는 것을 모두 제거
ls()
x <- rbinom(299, 1, 0.5)  ## 확률이 0.5인 베르누이 시행을 299회 반복
geyser <- read.table("geyser299.txt", header = TRUE)
geyser_x <- cbind(geyser, x)
write.table(geyser_x, "geyser_2.txt")  ## 저장된 데이터를 파일로 저장
sink("geyser.out")  ## 앞으로의 출력을 파일(geyser.out)에 보냄, 파일이 없으면 생성
summary(geyser_x)
sink()              ## 앞으로의 출력을 콘솔에 보냄
