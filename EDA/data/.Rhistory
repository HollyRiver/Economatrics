hist(rbeta(400, 1, 1), breaks = seq(0, 1, 0.1))
hist(rbeta(400, 2, 2), breaks = seq(0, 1, 0.1))
hist(rbeta(400, 4, 4), breaks = seq(0, 1, 0.1))
hist(rbeta(400, 8, 8), breaks = seq(0, 1, 0.1))
hist(rbeta(400, 1, 1), breaks = seq(0, 1, 0.1), prob = T)
par(mfrow = c(2,2))
hist(rbeta(400, 1, 1), breaks = seq(0, 1, 0.1), prob = T)
hist(rbeta(400, 2, 2), breaks = seq(0, 1, 0.1))
hist(rbeta(400, 4, 4), breaks = seq(0, 1, 0.1))
hist(rbeta(400, 8, 8), breaks = seq(0, 1, 0.1))
par(mfrow = c(2,2))
hist(rbeta(400, 1, 1), breaks = seq(0, 1, 0.1), prob = T)
hist(rbeta(400, 2, 2), breaks = seq(0, 1, 0.1), freq = F)
hist(rbeta(400, 4, 4), breaks = seq(0, 1, 0.1))
hist(rbeta(400, 8, 8), breaks = seq(0, 1, 0.1))
par(mfrow = c(2,2))
hist(rbeta(400, 1, 1), breaks = seq(0, 1, 0.1), prob = T, ylim = c(0, 3))
hist(rbeta(400, 2, 2), breaks = seq(0, 1, 0.1), freq = F, ylim = c(0, 3))
hist(rbeta(400, 4, 4), breaks = seq(0, 1, 0.1))
hist(rbeta(400, 8, 8), breaks = seq(0, 1, 0.1))
par(mfrow = c(2,2))
hist(rbeta(400, 1, 1), breaks = seq(0, 1, 0.1), prob = T, ylim = c(0, 3))
hist(rbeta(400, 2, 2), breaks = seq(0, 1, 0.1), freq = F, ylim = c(0, 3))
hist(rbeta(400, 4, 4), breaks = seq(0, 1, 0.1), prob = T, ylim = c(0, 3))
hist(rbeta(400, 8, 8), breaks = seq(0, 1, 0.1), freq = F, ylim = c(0, 3))
par(mfrow = c(1,1))
hist(rt(400, 5))
hist(rt(1000, 5))
hist(rt(1000, 5), prob = T)
curve(dnorm(-6:0.01:6))
-6:0.01:6
-6:6
-6:6:0.1
seq(-6, 6, 0.01)
hist(rt(1000, 5), prob = T)
curve(dnorm(seq(-6, 6, 0.01)))
curve(dnorm(seq(-6, 6, 0.01)))
curve(dnorm(seq(-6, 6, 0.01), 0, 1))
dnorm(seq(-6, 6, 0.01), 0, 1)
curve(seq(-6, 6, 0.01), dnorm(seq(-6, 6, 0.01), 0, 1))
curve(x = seq(-6, 6, 0.01), dnorm(seq(-6, 6, 0.01), 0, 1))
curve(dnorm(seq(-6, 6, 0.01), 0, 1), add = T)
hist(rt(1000, 5), prob = T)
curve(dnorm(seq(-6, 6, 0.01), 0, 1), add = T)
x = seq(-6, 6, 0.01); m = 0; s = sd(rt(1000, 5))
curve(dnorm(x, m, s))
hist(rt(1000, 5), prob = T)
curve(dnorm(x, m, s))
hist(rt(1000, 5), prob = T)
curve(dnorm(x, m, s), add = T)
hist(rt(1000, 5), prob = T, breaks = seq(-6, 6))
hist(rt(1000, 5), prob = T, nclass = 20)
curve(dnorm(x, m, s), add = T)
hist(rt(1000, 5), prob = T, bins = 20)
hist(rt(1000, 5), prob = T, bin = 20)
hist(rt(1000, 5), prob = T, breaks = 20)
hist(rt(1000, 5), prob = T, breaks = 20)
x = seq(-6, 6, 0.01); m = 0; s = sd(rt(1000, 5))
hist(rt(1000, 5), prob = T, breaks = 20)
curve(dnorm(x, m, s), add = T)
gr = c(1,2,2,1,1)
gr = factor(gr, levels = c(1, 2))
levels(gr) = c("high", "low")
levels(gr) = c("high", "low"); gr
stem.leaf.backback(head(Aids2$death, 50), tail(Aids2$death, 40))
data("Boston")
x <- Boston$medv
stem.leaf(x, unit = 10, m)
stem.leaf(x, unit = 10)
stem.leaf(x, unit = 10, m = 10)
stem.leaf(x, unit = 10, m = 1)
stem.leaf(x, unit = 10)
stem.leaf(co2)
stem.leaf.backback(head(Aids2$death, 50), tail(Aids2$death, 40))
stem.leaf(x, unit = 10)
stem.leaf(x, unit = 20)
stem.leaf(x)
stem.leaf(x, m = 10)
stem.leaf(x, m = 12)
stem.leaf(x, unit = 1)
x
stem.leaf(x, unit = 10.)
stem.leaf(x, unit = 0.1)
stem(x)
stem(x, atom = 0.1)
stem(x, atom = 1)
stem(x, atom = 2)
stem(x, scale = 2)
stem.leaf(x, unit = 0.1)
stem.leaf(x, unit = 0.1, m = 50)
stem.leaf(x, unit = 0.1, m = 2)
stem.leaf(x, unit = 0.1, m = 1)
stem.leaf(x, unit = 0.1)
hist(x)
hist(x, breaks = 20)
x <- rnorm(65)
lwb <- quantile(x, c(0.5, 0.25, 0.125, 0.0625), type = 8)
upb <- quantile(x, 1 - c(0.5, 0.25, 0.125, 0.0625), type = 8)
spr <- upb - lwb
mid <- (upb + lwb) / 2
stat_display <- data.frame(lwb, upb, mid, spr, row.names = c("M", "H", "E", "D"))
stat_display
library(ggplot2)
data("iris")
ggplot(iris, aes(Species, Sepal.Length)) +
geom_boxplot()
boxplot(Sepal.Length~Species, iris, xlab = "종", ylab = "꽃받침 길이", main = "종별 상자 그림")
ggplot(iris, aes(Species, Sepal.Length)) +
geom_boxplot()
boxplot(Sepal.Length~Species, iris, xlab = "종", ylab = "꽃받침 길이", main = "종별 상자 그림")
unique(iris$Species)
iris$Sepal.Length
library(dplyr)
iris |> group_by("Sepcies")
iris |> group_by("Sepcies") |> summarise(Sepal.Length = median)
iris |> group_by("Sepcies") |> summarise(Sepal.Length = median())
iris |> group_by("Sepcies") |> summarise(Sepal.Length = median())
iris |> group_by("Sepcies") |> summarise(Sepal.Length = n())
iris |> group_by("Sepcies") |> summarise(Sepal.Length = med)
iris |> group_by("Sepcies") |> summarise(Sepal.Length = med())
iris |> group_by("Sepcies") |> summarise(Sepal.Length = mean)
iris |> group_by("Sepcies") |> summarise(Sepal.Length = mean())
unique(iris$Species)[i]
unique(iris$Species)[1]
spr = c()
med = c()
for (i in 1:3) {
spr[i] = fivenum(iris[iris$Species == unique(iris$Species)[i]])[4] - fivenum(iris[iris$Species == unique(iris$Species)[i]])[2]
med[i] = fivenum(iris[iris$Species == unique(iris$Species)[i]])[3]
}
unique(iris$Species)[1]
iris$Species == unique(iris$Species)[1]
med[i] = fivenum(iris[iris$Species == unique(iris$Species)[i],])[3]
spr = c()
med = c()
for (i in 1:3) {
spr[i] = fivenum(iris[iris$Species == unique(iris$Species)[i],])[4] - fivenum(iris[iris$Species == unique(iris$Species)[i],])[2]
med[i] = fivenum(iris[iris$Species == unique(iris$Species)[i],])[3]
}
fivenum(iris[iris$Species == unique(iris$Species)[1],])
iris[iris$Species == unique(iris$Species)[1],]
spr = c()
med = c()
for (i in 1:3) {
spr[i] = fivenum(iris[iris$Species == unique(iris$Species)[i], 1])[4] - fivenum(iris[iris$Species == unique(iris$Species)[i], 1])[2]
med[i] = fivenum(iris[iris$Species == unique(iris$Species)[i], 1])[3]
}
trans_spr = log(spr)
trans_med = log(med)
lm(trans_spr~trans_med)  ## 1-p = 2.267, p = -1.167
boxplot(iris$Sepal.Length^(-1.167)~Species, iris)  ## 분포가 비슷해졌당
boxplot(iris$Sepal.Length^(-1.167)~Species, iris, xlab = "Species", ylab = "transformed Sepan Length", main = "변환된 상자 그림")  ## 분포가 비슷해졌당
boxplot(Sepal.Length~Species, iris, xlab = "종", ylab = "꽃받침 길이", main = "종별 상자 그림")
boxplot(iris$Sepal.Length^(-1.167)~Species, iris, xlab = "Species", ylab = "transformed Sepan Length", main = "변환된 상자 그림")  ## 분포가 비슷해졌당
boxplot(Sepal.Length~Species, iris, notch = TRUE)
pbinom(0, 3, 0.5)
0.5^4
3*0.5^4
3*(0.5^4)
0.5^3
3*(0.5^3)
pbinom(0, 3, 0.5); pbinom(1, 3, 0.5); pbinom(2, 3, 0.5); pbinom(3, 3, 0.5)
dbinom(0, 3, 0.5); dbinom(1, 3, 0.5); dbinom(2, 3, 0.5); dbinom(3, 3, 0.5)
n = 100
p_i <- (seq(1:n) - 0.5)/n
p_norm <- pnorm(x)
x <- rnorm(100)
p_norm <- pnorm(x)
x <- rnorm(100)
p_i <- (seq(1:n) - 0.5)/n
p_norm <- pnorm(sort(x))
plot(p_norm~p_i, xlab = expression(p[i]), ylab = expression(F(x[(i)])), main = "PP plot")
abline(0, 1)
plot(p_norm~p_i, xlab = "Theorical probability", ylab = "Sample probability", main = "PP plot")
abline(0, 1)
q_i <- sort(x)
q_norm <- qnorm(p_i)
plot(q_i~q_norm)
abline(0, 1)
plot(q_i~q_norm, xlab = "Theorical quantiles", ylab = "Sample quantiles", main = "QQ plot")
abline(0, 1)
qqplot(q_i, q_norm)
qqline(q_i)
qqplot(x, q_norm)
qqline(x)
qqplot(x)
qqline(x)
qqplot(x)
qqnorm(x)
qqline(x)
plot(q_i~q_norm, xlab = "Theorical quantiles", ylab = "Sample quantiles", main = "QQ plot")
abline(0, 1)
qqnorm(x)
qqline(x)
plot(q_i~q_norm, xlab = "Theorical quantiles", ylab = "Sample quantiles", main = "QQ plot")
abline(0, 1)
qqnorm(x)
qqline(x)
qqnorm(x)
qqline(x)
par(mfcol = c(1, 2))
plot(q_i~q_norm, xlab = "Theorical quantiles", ylab = "Sample quantiles", main = "QQ plot")
abline(0, 1)
qqnorm(x)
qqline(x)
q_i <- sort(rexp(n, 0.5))
q_exp <- -log(1-p_i)
plot(q_exp, q_i, xlab = "Theorical Quantiles", ylab = "Sample Quantiles", main = "Exponential Q-Q plot")
q_i <- sort(rexp(n, 0.5))
q_exp <- -log(1-p_i)
plot(q_exp, q_i, xlab = "Theorical Quantiles", ylab = "Sample Quantiles", main = "Exponential Q-Q plot")
par(mfcol = c(1,1))
q_i <- sort(rexp(n, 0.5))
q_exp <- -log(1-p_i)
plot(q_exp, q_i, xlab = "Theorical Quantiles", ylab = "Sample Quantiles", main = "Exponential Q-Q plot")
q_i <- sort(rexp(n, 0.5))
q_exp <- -log(1-p_i)
plot(q_exp, q_i, xlab = "Theorical Quantiles", ylab = "Sample Quantiles", main = "Exponential Q-Q plot")
q_i <- sort(rexp(n, 0.5))
q_exp <- -log(1-p_i)
plot(q_exp, q_i, xlab = "Theorical Quantiles", ylab = "Sample Quantiles", main = "Exponential Q-Q plot")
getwd()
setwd("C:\\Users\\hollyriver\\Documents\\Github\\R\\EDA\\data")
getwd()
read.table("acid rain.txt")
read.table("acid rain.txt")
read.table("acid rain.txt", sep " ")
read.table("acid rain.txt", sep = " ")
?read.table
setwd("C:\\Users\\hollyriver\\Documents\\Github\\R\\EDA\\data\\")
read.table("acid rain.txt", sep = " ")
read.table("acid rain.txt", sep = c(" ", "\n"))
read.csv("acid rain.txt", sep = " ")
)
read.csv("acid rain.txt", sep = c(" ", "\n"))
read.csv("acid rain.txt", sep = c(" ", "\n"))
read.csv("acid rain.txt", sep = c("\n"))
readLines(stdin())
readline(stdin())
4.39 4.45 5.67 4.39 4.52 4.26 4.26
readline(stdin())
4.39 4.45 5.67 4.39 4.52 4.26 4.26
readline(stdin())
readline("acid rain.txt")
readline("/acid rain.txt")
read.table("acid rain.txt")
read.table("acid rain.txt", sep = " ")
read.table("acid rain.txt", sep = " ")
read.table("acid rain.txt", sep = " ")[:, 1]
read.table("acid rain.txt", sep = " ")[1,]
readChar("acid rain.txt")
read.table("acid rain.txt")
t(read.table("acid rain.txt"))
rain <- t(read.table("acid rain.txt"))
rain
colnames(rain)
colname(rain)
rownames(rain)
rownames(rain) <- NULL
rain
rain <- data.frame(acid = t(read.table("acid rain.txt")))
rain
rowname(rain) = NULL
rownames(rain) = NULL
rain |> head()
library(aplpack)
stem.leaf(rain)
stem.leaf(rain$acid)
stem.leaf(rain$acid, m = 2)
stem.leaf(rain$acid, m = 0.5)
stem.leaf(rain$acid, m = 0.2)
stem.leaf(rain$acid, m = 0.5)
hist(rain$acid)
stem.leaf(rain$acid, unit = 0.1)
stem.leaf(rain$acid, unit = 0.1, m = 2)
king <- read.table("chosun kings.txt")
king
king <- read.table("chosun kings.txt", header = TRUE)
king
king <- read.table("chosun kings.txt", header = TRUE)
king <- read.table("chosun kings.txt", header = T)
king
king <- read.table("chosun kings.txt", header = T, encoding = "UTF-8")
king <- read.table("chosun kings.txt", header = T, encoding = "CP949")
king <- read.csv("chosun kings.txt", header = T)
king <- read.table("chosun kings.txt", header = T, sep = " ")
king <- read.table("chosun kings.txt", sep = " ", header = T)
read.table("chosun kings.txt", sep = " ", header = T)
king <- read.table("chosun kings.txt", sep = "\n", header = T)
read.table("chosun kings.txt", sep = "\n", header = T)
king <- read.table("chosun kings.txt", sep = "\n", header = T)
king <- read.table("chosun kings.txt",, header = T)
king <- read.table("chosun kings.txt",, header = T)
king <- read.table("chosun kings.txt", header = T)
read.table("chosun kings.txt")
Sys.setenv(LANG = "en")
king <- read.table("chosun kings.txt", header = T)
king <- read.table("chosun kings.txt", header = T, fileEncoding = "CP949", encoding = "UTF-8")
king
str(king)
stem.leaf(king)
stem.leaf(king)
stem.leaf(king$Life)
stem.leaf(king$Life, m - 0.5)
stem.leaf(king$Life, m = 0.5)
stem.leaf(king$Life, m = 1)
read.table("exam1.txt")
read.table("exam1.txt", header = T)
rm(list = ls())
exam <- read.table("exam1.txt", header = T)
sort(exam)
sort(exam$score)
exam
quantile(x, c(0.5, 0.25, 0.125, 0.0625), type = 8)
x <- sort(exam$score)
quantile(x, c(0.5, 0.25, 0.125, 0.0625), type = 8)
length(x)
1:65
65*0.5 + 0.5/3 + 1/3
65*0.25 + 0.25/3 + 1/3
65*0.125 + 0.125/3 + 1/3
65*0.0625 + 0.0625/3 + 1/3
65*0.5 + 0.5/3 + 1/3
x[33]
quantile(x, c(0.5, 0.25, 0.125, 0.0625), type = 8)
x[16]*2/3 + x[17]*1/3
x[16]*1/3 + x[17]*2/3
65*0.25 + 0.25/3 + 1/3  ## 16 + 1/3
x[8]*1/2 + x[9]*1/2
x[4]*7/12 + x[5]*5/12
quantile(x, c(0.5, 0.25, 0.125, 0.0625), type = 8)
quantile(x, 1-c(0.5, 0.25, 0.125, 0.0625), type = 8)
lwv <- quantile(x, c(0.5, 0.25, 0.125, 0.0625), type = 8)
upv <- quantile(x, 1-c(0.5, 0.25, 0.125, 0.0625), type = 8)
med <- (lwv + upb) / 2
med <- (lwv + upv) / 2
spr <- upv - lwv
med
data.frame(lower = lwv, upper = upv, mid = mid, spr = spr)
mid <- (lwv + upv) / 2
data.frame(lower = lwv, upper = upv, mid = mid, spr = spr)
rownames(value_summarize) <- c("M", H", "E", "D")
rownames(value_summarize)
value_summarize <- data.frame(lower = lwv, upper = upv, mid = mid, spr = spr)
rownames(value_summarize)
rownames(value_summarize) <- c("M", H", "E", "D")
rownames(value_summarize) = c("M", "H", "E", "D")
value_summarize
lwv <- quantile(x, c(0.5, 0.25, 0.125, 0.0625, 0), type = 8)
upv <- quantile(x, 1-c(0.5, 0.25, 0.125, 0.0625, 0), type = 8)
mid <- (lwv + upv) / 2
spr <- upv - lwv
value_summarize <- data.frame(lower = lwv, upper = upv, mid = mid, spr = spr)
rownames(value_summarize) = c("M", "H", "E", "D", "end")
value_summarize
value_summarize[2, 2] - value_summarize[1,2]
skew = ((value_summarize[2, 2] - value_summarize[1,2]) - (value_summarize[1, 2] - value_summarize[2,1]))/value_summarize[2,4]
skew
hist(exam$score)
spr
kurto_EH = spr[3]/spr[2] - 1.704
kurto_EH = spr[3]/spr[2] - 1.704; kurto_EH
kurto_DE = spr[4]/spr[3] - 2.274; kurto_DE
kurto_DE = spr[4]/spr[2] - 2.274; kurto_DE
kurto_EH = spr[3]/spr[2] - 1.704; kurto_EH
kurto_DH = spr[4]/spr[2] - 2.274; kurto_DH
f2 <- function(x) {1/2*exp(-1/2*abs(x))}
curve(f1, -4, 4, ylim = c(0, 1))
f1 <- function(x) {1/sqrt(2*pi)*exp(-x^2/2)}
curve(f1, -4, 4, ylim = c(0, 1))
curve(f2, -4, 4)
curve(f1, -4, 4, ylim = c(0, 1))
curve(f2, add = T)
curve(f1, -8, 8, ylim = c(0, 1))
curve(f2, add = T)
f2 <- function(x) {1/4*exp(-1/2*abs(x))}
curve(f1, -8, 8, ylim = c(0, 1))
curve(f2, add = T)
curve(f1, -4, 4, ylim = c(0, 1))
curve(f2, add = T)
curve(f1, -4, 4, ylim = c(0, 0.6))
curve(f2, add = T)
curve(f1, -4, 4, ylim = c(0, 0.5))
curve(f2, add = T)
curve(f2, add = T, lty = 2)
curve(f1, -4, 4, ylim = c(0, 0.5))
curve(f2, add = T, lty = 2)
0.635*2
0.675*2
0.675*2 + 1.5*1.35
0.675 + 1.5*1.35
read.csv("광역시-구 인구.csv", header = TRUE)
read.csv("광역시-구 인구.csv", header = TRUE, fileEncoding = "CP949")
read.csv("광역시-구 인구.csv", header = TRUE, fileEncoding = "CP949", encoding = "UTF-8")
population <- read.csv("광역시-구 인구.csv", header = TRUE, fileEncoding = "CP949", encoding = "UTF-8")
str(population)
boxplot(population$지역명, population$인구)
boxplot(population$인구~population$지역명)
reorder(population$지역명, population$지역코드)
population$지역명
dev.new()
boxplot(population$인구~population$지역명)
boxplot(population$인구~population$지역명, main = "7개 광역시의 구별 인구 비교")
boxplot(population$인구~population$지역명, main = "7개 광역시의 구별 인구 비교", xlab = "지역명", ylab = "인구")
reorder(population$지역명, population$지역코드)
population$지역명
population
domain <- reorder(population$지역명, population$지역코드)
boxplot(population$인구~domain)
domain
mode(domain)
class(domain)
class(population$지역명)
class(population$지역코드)
library(MASS)
data(iris)
boxplot(iris$Sepal.Length~iris$Species)
boxplot(iris$Sepal.Length)
hist(iris$Sepal.Length)
income <- c(880, 1511, 1944, 2350, 2738, 3135, 3609, 4170, 5068, 7695)
par(mfcol = c(1,2))
plot(income)
plot(log(income))
rep(c("A", "B", "C"), c(100, 100, 100))
claims <- c(x1, x2, x3)
group <- rep(c("A", "B", "C"), c(100, 100, 100))
x1 <- rgamma(100, 4)
x2 <- rgamma(100, 5)
x3 <- rgamma(100, 9)
claims <- c(x1, x2, x3)
group <- rep(c("A", "B", "C"), c(100, 100, 100))
boxplot(claims, group)
boxplot(claims, group)
boxplot(group, claims)
claims
boxplot(claims~group)
par(mfcol = c(1,1))
boxplot(claims~group)
par(mfcol = c(3,1))
boxplot(sqrt(claims)~group)
par(mfcol = c(1,3))
boxplot(claims~group)
boxplot(sqrt(claims)~group)
boxplot(log(claims)~group)
data("Animals")
lm(Animals$brain~Animals$body)
m1 <- lm(Animals$brain~Animals$body)
m2 <- rlm(Animals$brain~Animals$body)
dev.new()
plot(Animals$body, Animals$brain)
hist(Animals$body)
hist(Animals$body, breaks = 50)
hist(Animals$brain)
hist(Animals$brain, breaks = 50)
plot(log(Animals$body), log(Animals$brain))
par(mfcol = c(1,2))
m1 <- lm(log(Animals$brain)~log(Animals$body))
m2 <- rlm(log(Animals$brain)~log(Animals$body))
par(mfcol = c(1,2))
plot(log(Animals$body), log(Animals$brain))
abline(m1)
plot(log(Animals$body), log(Animals$brain))
abline(m2)
shapiro.test(rnorm(100))
shapiro.test(rt(100))
shapiro.test(rt(100, 20))
shapiro.test(rt(100, 10))
shapiro.test(rt(100, 14))
shapiro.test(rt(100, 14))
shapiro.test(rt(100, 14))
shapiro.test(rt(100, 14))
shapiro.test(rt(100, 14))
shapiro.test(rt(100, 14))
shapiro.test(rt(100, 12))
shapiro.test(rt(100, 12))
shapiro.test(rt(100, 12))
shapiro.test(rt(100, 12))
shapiro.test(rt(100, 12))
shapiro.test(rt(100, 5))
shapiro.test(rt(100, 5))
shapiro.test(rt(100, 5))
shapiro.test(rt(100, 5))
shapiro.test(rt(100, 5))
z_x <- (x - mean(x))/sd(x)
x <- rnorm(100, 40, 10)
y <- c(rnorm(90, 40, 10), rnorm(10, 80, 5))
z_x <- (x - mean(x))/sd(x)
z_y <- (y - mean(y))/sd(y)
hist(z_x)
dev.new()
par(mfcol = c(2,2))
hist(z_x)
hist(z_y)
par(mfrow = c(2,2))
hist(z_x)
hist(z_y)
rob_z_x <- (x - median(x))/(IQR(x)/1.35)
rob_z_y <- (y - median(y))/(IQR(y)/1.35)
hist(rob_z_x)
hist(rob_z_y)
hist(z_x, xlim = c(-4, 4))
dev.new()
par(mfrow = c(2,2))
hist(z_x, xlim = c(-4, 4))
hist(z_y, xlim = c(-4, 4))
hist(rob_z_x, xlim = c(-4, 4))
hist(rob_z_y, xlim = c(-4, 4))
par(mfrow = c(2,2))
hist(z_x, xlim = c(-4, 4), breaks = 10)
hist(z_y, xlim = c(-4, 4), breaks = 10)
hist(rob_z_x, xlim = c(-4, 4), breaks = 10)
hist(rob_z_y, xlim = c(-4, 4), breaks = 10)
